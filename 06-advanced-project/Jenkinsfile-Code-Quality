pipeline {
    agent any

    environment {
        // Ensure Poetry binaries are in PATH
        PATH = "${env.PATH}:/var/lib/jenkins/.local/share/pypoetry/venv/bin"
        POETRY_HOME = "/var/lib/jenkins/.local/share/pypoetry"
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                dir('06-advanced-project') {
                    script {
                        echo "Installing dependencies with Poetry..."
                        sh '''
                            if [ ! -f pyproject.toml ]; then
                                echo "Error: pyproject.toml not found!"
                                exit 1
                            fi
                            poetry install --with dev
                        '''
                    }
                }
            }
        }

        stage('Code Quality') {
            steps {
                dir('06-advanced-project') {
                    script {
                        echo "Running code quality checks with flake8..."
                        sh '''
                            if ! command -v flake8 &> /dev/null; then
                                echo "flake8 not installed. Installing..."
                                poetry add --dev flake8
                            fi
                            poetry run flake8 .
                        '''
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir('06-advanced-project') {
                    script {
                        echo "Running tests with pytest..."
                        sh '''
                            poetry run pytest --maxfail=1 --disable-warnings -q
                        '''
                    }
                }
            }
        }

        stage('Other Steps') {
            steps {
                echo "You can add deployment, packaging, or additional steps here"
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed. Check logs for details.'
        }
    }
}
