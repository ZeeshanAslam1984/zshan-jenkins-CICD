pipeline {
    agent any

    environment {
        IMAGE_NAME = 'zeeshanaslam1984/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = credentials('kubeconfig-credentials-id')  // Your Minikube kubeconfig
    }

    stages {
        stage('Setup') {
            steps {
                dir('05-kubernetes') {
                    sh '''
#!/bin/bash -e
echo "Listing kubeconfig"
ls -la $KUBECONFIG
chmod 644 $KUBECONFIG

# Create Python venv and install requirements
python3 -m venv venv
. venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
'''
                }
            }
        }

        stage('Test') {
            steps {
                dir('05-kubernetes') {
                    sh '''
. venv/bin/activate
pytest
'''
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('05-kubernetes') {
                    sh '''
docker build -t ${IMAGE_TAG} .
docker image ls
'''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('05-kubernetes') {
                    sh 'docker push ${IMAGE_TAG}'
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                dir('05-kubernetes') {
                    sh '''
. venv/bin/activate
kubectl config use-context minikube
kubectl apply -f k8s-deployment.yaml
kubectl get pods
'''
                }
            }
        }
    }

    post {
        always { echo "Pipeline finished." }
        success { echo "Deployment succeeded!" }
        failure { echo "Deployment failed!" }
    }
}
