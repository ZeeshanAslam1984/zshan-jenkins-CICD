pipeline {
    agent any

    environment {
        IMAGE_NAME = 'zeeshanaslam1984/zshan-jenkins-docker-flask-app'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')      // Your AWS credentials in Jenkins
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {

        stage('Build Docker Image') {
            steps {
                dir('04-docker') {   // Folder containing Dockerfile
                    script {
                        GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                        IMAGE_TAG = "${IMAGE_NAME}:${GIT_COMMIT_SHORT}"
                        echo "Building Docker image $IMAGE_TAG..."
                        sh "docker build -t $IMAGE_TAG ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'docker-creds', 
                                     usernameVariable: 'DOCKER_HUB_USERNAME', 
                                     passwordVariable: 'DOCKER_HUB_PASSWORD')
                ]) {
                    dir('04-docker') {
                        echo "Logging into Docker Hub..."
                        sh 'echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin'
                        echo "Pushing Docker image $IMAGE_TAG..."
                        sh "docker push $IMAGE_TAG"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([string(credentialsId: 'k8s-token', variable: 'K8S_TOKEN')]) {
                    dir('04-docker') {
                        script {
                            sh '''
                            # Configure kubectl to use service account token
                            kubectl config set-cluster minikube --server=https://$(minikube ip):8443 --insecure-skip-tls-verify=true
                            kubectl config set-credentials jenkins-sa --token=$K8S_TOKEN
                            kubectl config set-context jenkins-context --cluster=minikube --user=jenkins-sa
                            kubectl config use-context jenkins-context

                            # Test cluster access
                            kubectl get nodes

                            # Deploy application
                            kubectl apply -f k8s-deployment.yaml

                            # Check pods
                            kubectl get pods
                            '''
                        } // closes script
                    } // closes dir
                } // closes withCredentials
            }
        }

    } // closes stages

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Deployment succeeded!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
} // closes pipeline
