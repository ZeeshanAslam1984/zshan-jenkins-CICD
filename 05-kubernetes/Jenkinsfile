pipeline {
    agent any

    environment {
        IMAGE_NAME = 'zeeshanaslam1984/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = '/var/lib/jenkins/.minikube/config'  // fixed Minikube kubeconfig
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                echo "Listing kubeconfig file"
                sh 'ls -la $KUBECONFIG'
                sh 'chmod 644 $KUBECONFIG'
                sh 'ls -la $KUBECONFIG'

                echo "Setting up Python virtual environment"
                sh 'python3 -m venv venv'
                sh '. venv/bin/activate && pip install --upgrade pip'
                
                // Only install requirements if the file exists
                sh '''
                if [ -f requirements.txt ]; then
                    . venv/bin/activate && pip install -r requirements.txt
                else
                    echo "No requirements.txt found, skipping Python dependencies."
                fi
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                if [ -f requirements.txt ]; then
                    . venv/bin/activate && pytest || echo "Tests failed"
                else
                    echo "Skipping tests"
                fi
                '''
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'
                    echo 'Login to Docker Hub successful'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${IMAGE_TAG} .'
                echo "Docker image built successfully"
                sh 'docker image ls'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push ${IMAGE_TAG}'
                echo "Docker image pushed successfully"
            }
        }

        stage('Deploy to Staging') {
            steps {
                sh 'kubectl config use-context minikube'
                sh 'kubectl apply -f k8s-deployment.yaml'
                sh 'kubectl get pods'
            }
        }

        stage('Acceptance Test') {
            steps {
                script {
                    def service = sh(script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'", returnStdout: true).trim()
                    echo "Service endpoint: ${service}"
                    sh "k6 run -e SERVICE=${service} acceptance-test.js || echo 'Acceptance test failed'"
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh 'kubectl config use-context minikube'
                sh "kubectl set image deployment/flask-app flask-app=${IMAGE_TAG}"
                sh 'kubectl get pods'
            }
        }

    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Deployment succeeded!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
