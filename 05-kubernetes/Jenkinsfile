pipeline {
    agent any

    environment {
        IMAGE_NAME = 'zeeshanaslam1984/jenkins-flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Setup') {
            steps {
                sh '''
#!/bin/bash -e
echo "Listing kubeconfig file"
ls -la $KUBECONFIG
chmod 644 $KUBECONFIG
ls -la $KUBECONFIG

echo "Setting up Python virtual environment"
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
'''
            }
        }

        stage('Test') {
            steps {
                sh '''
#!/bin/bash -e
source venv/bin/activate
pytest
'''
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
#!/bin/bash -e
echo $PASSWORD | docker login -u $USERNAME --password-stdin
'''
                    echo 'Login successful'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
#!/bin/bash -e
docker build -t $IMAGE_TAG .
docker image ls
'''
                echo "Docker image built successfully"
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
#!/bin/bash -e
docker push $IMAGE_TAG
'''
                echo "Docker image pushed successfully"
            }
        }

        stage('Deploy to Staging') {
            steps {
                sh '''
#!/bin/bash -e
kubectl config use-context user@staging.us-east-1.eksctl.io
kubectl config current-context
kubectl set image deployment/flask-app flask-app=$IMAGE_TAG
'''
            }
        }

        stage('Acceptance Test') {
            steps {
                sh '''
#!/bin/bash -e
SERVICE=$(kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}')
echo $SERVICE
k6 run -e SERVICE=$SERVICE acceptance-test.js
'''
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh '''
#!/bin/bash -e
kubectl config use-context user@prod.us-east-1.eksctl.io
kubectl config current-context
kubectl set image deployment/flask-app flask-app=$IMAGE_TAG
'''
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Deployment succeeded!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
